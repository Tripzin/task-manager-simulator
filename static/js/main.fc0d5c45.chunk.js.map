{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["getRandomInt","min","max","Math","ceil","floor","random","shiftData","data","i","length","value","Graph","props","color","offset","cores","colorcodes","blue","grid","areaStroke","areaFill","frameStroke","height","width","margin","top","right","bottom","left","stroke","xAxisId","tickLine","ticks","yAxisId","tickSize","interval","type","dataKey","fill","isAnimationActive","x","y","Canvas","state","logicalProcessors","setInterval","setState","graph","key","column","className","row","rowDom","ri","columnDom","lj","push","multiGraph","React","Component","Parameter","parameterName","name","item","undefined","unit","indexOf","style","fontSize","textAlign","defaultValue","onChange","method","readOnly","ParametersContainer","parameterList","formatTime","now","Date","getDay","toString","padStart","getHours","getMinutes","getSeconds","CpuDetail","cpuName","utilization","speed","processes","isEditable","threads","handles","upTime","baseSpeed","toFixed","sockets","l1Cache","l2Cache","l3Cache","this","PartsList","PartsCard","lineHeight","fontWeight","TaskManager","cpuData","Array","map","cpuUtilization","cpuSpeed","event","onClickProcessors","persist","target","parseInt","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fc0d5c45.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { AreaChart, Area, CartesianGrid, XAxis, YAxis, ReferenceLine } from 'recharts';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\nfunction initData() {\n  const data = Array(60).fill(0);\n  return data.map((value) => { return { value: getRandomInt(0, 100) } })\n}\n\n// 配列に格納された値を左にシフト,新しい値をpushして返す\nfunction shiftData(data) {\n\n  // console.log(data)\n  for (let i = 0; i < data.length - 1; i++) {\n    data[i].value = data[i + 1].value;\n  }\n  data[data.length - 1].value = getRandomInt(0, 100);\n\n  return data;\n\n}\n\n\nfunction Graph(props) {\n\n  const data = props.data;\n  const color = props.color;\n  const offset = props.offset;\n  const cores = props.cores;\n  const colorcodes = { blue: { grid: \"#d9eaf4\", areaStroke: \"#3897CF\", areaFill: \"#f1f6fa\", frameStroke: \"#272e92\" } }\n  if (offset !== \"\") {\n\n    return (\n      <AreaChart\n        height={200 / cores}\n        width={510 / cores}\n        data={data} //ここにArray型のデータを指定\n        margin={{ top: 0, right: 0, bottom: 0, left: 0 }}  //marginを指定\n      >\n        <CartesianGrid\n          stroke={colorcodes[color].grid}\n        />\n        <XAxis xAxisId={0} tickLine={false} height={0} ticks={[10 - offset, 20 - offset, 30 - offset, 40 - offset, 50 - offset, 60 - offset]} />\n        <YAxis yAxisId={0} tickLine={false} width={0} ticks={[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]} tickSize={100} interval={0} />\n        <Area\n          type=\"linear\"\n          dataKey=\"value\"\n          stroke={colorcodes[color].areaStroke}\n          fill={colorcodes[color].areaFill}\n          isAnimationActive={false}\n        />\n        <ReferenceLine x={0} stroke={colorcodes[color].frameStroke} />\n        <ReferenceLine x={59} stroke={colorcodes[color].frameStroke} />\n        <ReferenceLine y={0} stroke={colorcodes[color].frameStroke} />\n        <ReferenceLine y={100} stroke={colorcodes[color].frameStroke} />\n      </AreaChart>\n    );\n  } else {\n    return (\n      <AreaChart\n        height={38}\n        width={50}\n        data={data} //ここにArray型のデータを指定\n        margin={{ top: 0, right: 0, bottom: 0, left: 0 }}  //marginを指定\n      >\n\n        <XAxis xAxisId={0} tickLine={false} height={0} ticks={[10 - offset, 20 - offset, 30 - offset, 40 - offset, 50 - offset, 60 - offset]} />\n        <YAxis yAxisId={0} tickLine={false} width={0} ticks={[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]} tickSize={100} interval={0} />\n        <Area\n          type=\"linear\"\n          dataKey=\"value\"\n          stroke={colorcodes[color].areaStroke}\n          fill={colorcodes[color].areaFill}\n          isAnimationActive={false}\n        />\n        <ReferenceLine x={0} stroke={colorcodes[color].frameStroke} />\n        <ReferenceLine x={59} stroke={colorcodes[color].frameStroke} />\n        <ReferenceLine y={0} stroke={colorcodes[color].frameStroke} />\n        <ReferenceLine y={100} stroke={colorcodes[color].frameStroke} />\n      </AreaChart>\n    );\n  }\n}\nclass Canvas extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: props.data,\n      offset: 0,\n      logicalProcessors: props.cores\n    }\n    setInterval(() => {\n      this.setState({\n        offset: (this.state.offset + 1) % 10,\n      })\n    }, 1000);\n  }\n\n\n\n  render() {\n    // console.log(this.state.logicalProcessors)\n    const graph = (key, column) => {\n      return (\n        <div className=\"graph\" key={key}>\n          <Graph data={this.state.data} color=\"blue\" offset={this.state.offset} cores={column} />\n        </div>\n      )\n    }\n    let column = () => {\n      const cores = this.props.cores['value']\n      if (cores < 16) {\n        return Math.ceil(cores / 2);\n      } else {\n        return 8;\n      }\n    }\n    let row = () => {\n      const cores = this.props.cores['value']\n      if (cores < 16) {\n        return 2;\n      } else {\n        return Math.ceil(cores / 8);\n      }\n    }\n\n    const multiGraph = (column, row) => {\n      let rowDom = [];\n      for (let ri = 0; ri < row; ri++) {\n        let columnDom = [];\n        for (let lj = 0; lj < column; lj++) {\n          columnDom.push(graph(lj, column));\n        }\n        rowDom.push(<div className=\"graph-row\" key={ri}>{columnDom}</div>)\n      }\n      return (<div className=\"test\">{rowDom}</div>);\n    }\n    return (\n      <div className=\"graphs d-inline-block\" >\n        <div className=\"graph-tick\">\n          <span>60 秒間の使用率  (%)</span><span>100%</span>\n        </div>\n        {multiGraph(column(), row())}\n      </div>\n    );\n  }\n}\n\n//使用率とか速度とか.\nfunction Parameter(props) {\n  // console.log(props)\n  const parameterName = props.name;\n  const value = props.item === \"\" || props.item === undefined ? \"\" : props.item.value;\n  const unit = props.item === \"\" || props.item === undefined ? \"\" : props.item.unit;\n  const readOnly = (unit) => { return unit === \"\" ? true : false }\n  const method = () => {\n    if (props.method !== undefined) {\n      return props.method;\n    } else {\n      return undefined;\n    }\n  }\n\n  if ([\"使用率\", \"速度\", \"プロセス数\", \"スレッド数\", \"ハンドル数\", \"稼働時間\"].indexOf(parameterName) >= 0) {\n\n    return (\n      <div className=\"d-inline-block mr-3 mb-1\">\n        <span className=\"d-block\" style={{\n          color: \"#868585\",\n          fontSize: \"10px\"\n        }}>{parameterName}</span>\n\n        <span className=\"d-block\" style={{\n          fontSize: \"19px\"\n        }}>{value}{unit}</span>\n      </div>\n    );\n  } else {\n    if (value === \"\") {\n      return (\n\n        <div className=\"name d-flex mb-1\">\n          <span style={{\n            color: \"#868585\",\n            fontSize: \"10px\"\n          }}>{parameterName}:</span>\n        </div>\n\n      );\n    }\n    else {\n      return (\n\n        <div className=\"value d-flex mb-1\" style={{\n          textAlign: \"left\"\n        }}>\n          <div style={{\n            fontSize: \"10px\",\n          }} className=\"d-inline-block\">\n            <input type=\"text\" className=\"text-right\" defaultValue={value} onChange={method()} />\n            <input type=\"text\" defaultValue={unit} readOnly={readOnly(unit)} />\n          </div>\n        </div>\n\n      );\n\n    }\n  }\n}\n\nfunction ParametersContainer(props) {\n  const parameterList = props.parameterList;\n\n  return (\n    <div className=\"d-inline-flex\">\n      <div className=\"parametersLeft d-inline-block\">\n        <div className=\"line-1\">\n          <Parameter name=\"使用率\" item={parameterList['utilization']} />\n          <Parameter name=\"速度\" item={parameterList['speed']} />\n        </div>\n        <div className=\"line-2\">\n          <Parameter name=\"プロセス数\" item={parameterList['processes']} />\n          <Parameter name=\"スレッド数\" item={parameterList['threads']} />\n          <Parameter name=\"ハンドル数\" item={parameterList['handles']} />\n        </div>\n        <div className=\"line-3\">\n          <Parameter name=\"稼働時間\" item={parameterList['upTime']} />\n        </div>\n      </div>\n      <div className=\"parametersRight d-inline-block\">\n        <div className=\"parameterName d-inline-block mr-3\">\n          <Parameter name=\"基本速度\" item=\"\" />\n          <Parameter name=\"ソケット\" item=\"\" />\n          <Parameter name=\"コア\" item=\"\" />\n          <Parameter name=\"論理プロセッサ数\" item=\"\" />\n          <Parameter name=\"L1 キャッシュ\" item=\"\" />\n          <Parameter name=\"L2 キャッシュ\" item=\"\" />\n          <Parameter name=\"L3 キャッシュ\" item=\"\" />\n        </div>\n        <div className=\"parameterValue d-inline-block\">\n          <Parameter item={parameterList['baseSpeed']} />\n          <Parameter item={parameterList['sockets']} />\n          <Parameter item={parameterList['cores']} />\n          <Parameter item={parameterList['logicalProcessors']} method={parameterList.method} />\n          <Parameter item={parameterList['l1Cache']} />\n          <Parameter item={parameterList['l2Cache']} />\n          <Parameter item={parameterList['l3Cache']} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction formatTime() {\n  const now = new Date();\n  var days = now.getDay().toString().padStart(2, \"0\");\n  var hours = now.getHours().toString().padStart(2, \"0\");\n  var minutes = now.getMinutes().toString().padStart(2, \"0\");\n  var seconds = now.getSeconds().toString().padStart(2, \"0\");\n  return days + \":\" + hours + \":\" + minutes + \":\" + seconds;\n}\n\n\nclass CpuDetail extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      cpuName: \"Intel(R) Core(TM) i5-9600K CPU\",\n      utilization: props.utilization,\n      speed: props.speed,\n      processes: { value: 200, unit: \"\", isEditable: false },\n      threads: { value: 400, unit: \"\", isEditable: false },\n      handles: { value: 123435, unit: \"\", isEditable: false },\n      upTime: { value: formatTime(), unit: \"\", isEditable: false },\n      baseSpeed: { value: (4.00).toFixed(2), unit: \" GHz\", isEditable: true },\n      sockets: { value: 1, unit: \"\", isEditable: true },\n      cores: { value: 8, unit: \"\", isEditable: true },\n      logicalProcessors: { value: props.logicalProcessors, unit: \"\", isEditable: true },\n      l1Cache: { value: 256, unit: \" KB\", isEditable: true },\n      l2Cache: { value: (1.0).toFixed(1), unit: \" MB\", isEditable: true },\n      l3Cache: { value: (8.0).toFixed(1), unit: \" MB\", isEditable: true },\n      method: props.method,\n      data: props.data\n    }\n\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this.setState({\n        utilization: this.props.utilization,\n        speed: this.props.speed,\n        processes: { value: getRandomInt(100, 500), unit: \"\", isEditable: false },\n        threads: { value: getRandomInt(300, 400), unit: \"\", isEditable: false },\n        handles: { value: getRandomInt(100000, 200000), unit: \"\", isEditable: false },\n        upTime: { value: formatTime(), unit: \"\", isEditable: false },\n      })\n    }, 1000);\n\n  }\n\n\n\n  render() {\n    // console.log(this.state.logicalProcessors)\n    return (\n      <div className=\"cpu-detail d-inline-block\">\n        <div className=\"title\">\n          <span style={{ fontSize: \"26px\" }} >CPU</span>\n          <input type=\"text\" className=\"text-right cpu-name mr-4\" defaultValue={this.state.cpuName} />\n        </div>\n        <div className=\"ml-1\">\n          <Canvas data={this.state.data} cores={this.state.logicalProcessors}></Canvas>\n        </div>\n        <div className=\"parameters  mt-4 ml-1 d-inline-flex\">\n          <ParametersContainer parameterList={this.state} />\n        </div>\n      </div >\n    );\n  }\n}\n\nclass PartsList extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: props.data,\n      utilization: props.utilization,\n      speed: props.speed\n    }\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this.setState({\n        utilization: this.props.utilization,\n        speed: this.props.speed,\n      })\n    }, 1000);\n\n  }\n\n  render() {\n    return (\n      <div className=\"parts-list d-inline-block\">\n        <PartsCard name=\"CPU\" data={this.state.data} utilization={this.state.utilization} speed={this.state.speed} color='blue'></PartsCard>\n      </div>\n    )\n  }\n}\n\nfunction PartsCard(props) {\n  return (\n    <div className=\"btn-light\">\n\n      <div className=\" parts-card\">\n        <div className=\"d-inline-block\">\n          <Graph data={props.data} color={props.color} offset=\"\" />\n        </div>\n        <div className=\"information d-inline-block ml-2\">\n          <div className=\"line-1 mb-1\" style={{\n            lineHeight: \"1\",\n            fontSize: \"15px\",\n            fontWeight: \"500\"\n          }}>{props.name}</div>\n          <div className=\"line-2\">\n\n            <div className=\"d-inline-block mr-1\" style={{\n              fontSize: \"10px\",\n              fontWeight: \"500\"\n            }}>{props.utilization['value']}{props.utilization['unit']}</div>\n\n            <div className=\"d-inline-block\" style={{\n              fontSize: \"10px\",\n              fontWeight: \"500\",\n            }}>{props.speed['value']}{props.speed['unit']}</div>\n          </div>\n        </div>\n\n      </div>\n    </div>\n  )\n}\n\n\nclass TaskManager extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      cpuData: initData(),\n      cpuUtilization: { value: 10, unit: \"%\", isEditable: false },\n      cpuSpeed: { value: 3.45, unit: \" GHz\", isEditable: false },\n      logicalProcessors: 128,\n      method: (event) => { this.onClickProcessors(event) }\n\n    }\n  }\n  componentDidMount() {\n    setInterval(() => {\n      this.setState({\n        cpuData: shiftData(this.state.cpuData),\n        cpuUtilization: { value: this.state.cpuData[0]['value'], unit: \"%\" },\n        cpuSpeed: { value: ((Math.random() * 4).toFixed(2)), unit: \" GHz\" },\n      })\n    }, 1000)\n  }\n  onClickProcessors(event) {\n    event.persist();\n    const value = event.target.value;\n    this.setState({ logicalProcessors: parseInt(value) });\n  }\n  render() {\n    return (\n      <div className=\"task-manager d-inline-flex\">\n        <PartsList data={this.state.cpuData} utilization={this.state.cpuUtilization} speed={this.state.cpuSpeed}></PartsList>\n        <CpuDetail data={this.state.cpuData} utilization={this.state.cpuUtilization} speed={this.state.cpuSpeed} logicalProcessors={this.state.logicalProcessors} method={this.state.method}></CpuDetail>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TaskManager></TaskManager>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}